# 索引管理

## 查看全部索引
GET _cat/indices?v

## 删除索引
DELETE shopping

# 文档管理

## 新增文档
POST shopping/_doc
{
  "title":"小米手机",
  "category":"小米", "images":"http://www.gulixueyuan.com/xm.jpg", 
  "price":4000.00
}

## 查看文档
GET shopping/_doc/10086

## 查看全部文档
GET shopping/_search

## 删除文档
DELETE shopping/_doc/10086

## 按照查询条件删除文档
POST shopping/_delete_by_query
{
  "query":{
    "match":{
      "price":4000.00
    }
  }
}

#映射
## 查看索引详情中的映射(mapping)
GET shopping

## 0 删除索引
DELETE student

## 1 创建索引
PUT student


## 2 创建索引映射
PUT student/_mapping
{
  "properties": {
   "name":{
     "type": "text",
     "index": true
  }, 
  "sex":{
     "type": "keyword",
     "index": true
   },
   "age":{
     "type": "long",
     "index": true
    } 
  }
}

## 3. 查看索引详情
GET student


## 创建索引时之间设置映射
PUT student1
{
  "settings": {},
  "mappings": {
      "properties": {
        "name":{
          "type": "text",
          "index": true
        }, 
        "sex":{
          "type": "text",
          "index": false
        },
        "age":{
          "type": "long",
          "index": false
        }
    }
  }
}

## 查看创建的索引详情
GET student1


# 查询
## 数据准备
POST student/_doc
{"name":"zhangsan","nickname":"zhangsan", "sex":"男","age":30}

POST student/_doc
{"name":"lisi", "nickname":"lisi", "sex":"男", "age":20}

POST /student/_doc/1003
{"name":"wangwu", "nickname":"wangwu", "sex":"女","age":40}

 POST /student/_doc/1004
{"name":"zhangsan1", "nickname":"zhangsan1", "sex":"女","age":50}

POST /student/_doc/1005
{"name":"zhangsan2", "nickname":"zhangsan2", "sex":"女","age":30}

POST /student/_doc/1006
{"name":"zhangsan2", "nickname":"zhangsan", "sex":"女","age":30}


## 查询所有
GET student/_search
{
  "query":{
    "match_all":{ //查询类型 match_all(代表查询所有)/match/term/range 等等
      //查询条件
    }
  }
}

## 匹配查询
GET student/_search
{
  "query":{
    "match":{// match 匹配类型查询，会把查询条件进行分词，然后进行查询，多个词条之间是 or 的关系
      "name":"zhangsan lisi"// zhangsan 和 lisi 是两个词条，查询结果name为zhangsan 或 lisi均可以被查询到
    }
  }
}


## 字段匹配查询
GET student/_search
{
"query": {
   "multi_match": {// multi_match 与 match 类似，不同的是它可以在多个字段中查询
       "query": "zhangsan",
       "fields": ["name","nickname"]
    } 
  }
}

## 关键字精确查询
GET student/_search
{
  "query":{
    "term": {
      "name": {
        "value": "zhangsan"
      }
    }
  }
}

## 多关键字精确查询
GET student/_search
{
  "query":{
    "terms": {
      "name": [
        "zhangsan",
        "lisi"
      ]
    }
  }
}


## 指定查询返回的字段
GET student/_search
{
  "_source":["name","", "nickname"],// 默认情况下，Elasticsearch 在搜索的结果中，会把文档中保存在_source 的所有字段都返回。 如果我们只想获取其中的部分字段，我们可以添加_source 的过滤
  "query":{
    "terms": {
      "nickname": [
        "zhangsan",
        "lis"
      ]
    }
  }
}

## 过滤字段
GET student/_search
{
  "_source": {
    "includes":["name","nickname"],// 来指定想要显示的字段
    "excludes":["nickname"] // 来指定不想要显示的字段
  }, 
  "query": {
    "terms": {
      "name": [
        "zhangsan",
        "lisi"
      ]
    }
  }
}

## 组合查询
GET student/_search
{
  "query": {
    "bool": {// `bool`把各种其它查询通过`must`(必须 )、`must_not`(必须不)、`should`(应该)的方式进行组合
      "must": [
        {
          "match": {
            "name": "zhangsan"
          }
        } 
      ],
     "must_not": [
        {
          "match": {
            "age": 40
          } 
        }
     ],
     "should": [
        {
          "match": {
            "sex": "男" 
          }
        } 
      ]
    } 
  }
}

## 范围查询
GET student/_search
{
    "_source": {
    "includes":["name","nickname"]
  },
  "query":{
    "range": {
      "age": {
        "gte": 10,
        "lte": 90
      }
    }
  }
}


## 模糊查询1
GET student/_search
{
  "query":{
    "fuzzy": {
      "name": {
        "value":"zhangsan"
      }
    }
  }
}

## 增加文档，验证模糊查询
POST /student/_doc/1007
{"name":"zhangsnn", "nickname":"wangwu", "sex":"女","age":40}
## 增加文档，验证模糊查询
POST /student/_doc/1008
{"name":"zhangnnn", "nickname":"wangwu", "sex":"女","age":40}
## 增加文档，验证模糊查询
POST /student/_doc/1009
{"name":"zhangnnnnn", "nickname":"wangwu", "sex":"女","age":40}


## 模糊查询2
## id为1007、1008的文档边查询出来了,但是1009的文档没有被查询出来
GET student/_search
{
  "query":{
    "fuzzy":{
      "name":{
        "value":"zhangsan",
        "fuzziness":3 //通过 fuzziness 修改编辑距离。一般使用默认值 AUTO，根据术语的长度生成编辑距离。编辑距离是将一个术语转换为另一个术语所需的一个字符更改的次数
      }
    }
  }
}


## 增加文档，验证排序
POST /student/_doc/1010
{"name":"zhangnnnnn", "nickname":"zhangsan", "sex":"女","age":17}
POST /student/_doc/1011
{"name":"zhangzhangzhang", "nickname":"zhangsan", "sex":"男","age":10}

## 排序--按照单字段对查询结果进行排序
GET student/_search
{
  "query":{
    "match":{
      "nickname":"zhangsan"
    }
  },
  "sort": [
    {
      "age": {
        "order": "asc"//, "desc"
      }
    }
  ]
}

## 排序--按照多字段对查询结果进行排序
GET student/_search
{
  "query":{
    "match": {
      "nickname": "zhangsan"
    }
  },
  "sort":[
    {
      "age":{
      "order":"asc"
      }
    },
    {
      "sex": {
        "order": "desc"
      }
    }
  ]
}


## 高亮查询
GET student/_search
{
  "query":{
    "match": {
      "nickname": "zhangsan"
    }
  },
  "highlight": {
    "pre_tags": "<font color='red'>",
    "post_tags": "</font>",
    "fields": {
      "name": {} 
    }
  },
  "sort": [
    {
      "_score": {
        "order": "desc"
      }
    }
  ]
}

## 分页查询
GET student/_search
{
  "query":{
    "match": {
      "nickname": "zhangsan"
    }
  },
  "from": 1,
  "size": 2,
  "sort": [
    {
      "age": {
        "order": "desc"
      }
    }
  ]
}


## 聚合查询1 --最大值
GET student/_search
{
  "query":{
    "match": {
      "nickname": "zhangsan"
    }
  },
  "aggs": {
    "max_age": {
      "max": {
        "field": "age"
      }
    }
  },
  "size":0
}

## 聚合查询2 --最小值
GET student/_search
{
  "aggs": {
    "min_age": {
      "min": {
        "field": "age"
      }
    }
  },
  "size":0
}

## 聚合查询3 --平均值
GET student/_search
{
  "aggs": {
    "avg_age": {
      "avg": {
        "field": "age"
      }
    }
  },
  "size":0
}

## 聚合查询4 --对某一字段的值去重之后再取文档总数
GET student/_search
{
  "aggs": {
    "distinct_age": {
      "cardinality": {
        "field": "age"
      }
    }
  },
  "size":0
}

## 聚合查询5 --State聚合(stats 聚合，对某个字段一次性返回 count，max，min，avg 和 sum 五个指标)
GET student/_search
{
  "aggs": {
    "state_agg": {
      "stats": {
        "field": "age"
      }
    }
  },
  "size":0
}


## 聚合查询6 --桶聚合查询 --terms聚合，分组统计
GET student/_search
{
 "aggs": {
   "age_groupby": {
     "terms": {
       "field": "age",
       "size": 10
     }
   }
 } ,
 "size":0
}

## 聚合查询7 --桶聚合查询 --在 terms分组下再进行聚合--非常好用
GET student/_search
{
  "aggs": {
    "age_groupby": {
      "terms": {
        "field": "age",
        "size": 10
      },
      "aggs": {
        "sum_age": {
          "sum": {
            "field": "age"
          }
        }
      }
    }
  },
  "size":0
}
